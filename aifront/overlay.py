# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/backup_overlay.ipynb.

# %% auto 0
__all__ = ['EnvOverlay']

# %% ../nbs/backup_overlay.ipynb 1
from threading import Thread
from time import sleep, time

import dash_bootstrap_components as dbc
import dash_svg as dsvg
import orjson
import pandas as pd
import plotly.express as px
from dash import Dash, Input, Output, State, dcc, html
from dash.exceptions import PreventUpdate
from dash_extensions import WebSocket
from furl import furl

# %% ../nbs/backup_overlay.ipynb 3
arrow_common_class_name = [
    "fa-solid",
    "position-absolute",
    "d-flex",
    "align-items-center",
    "justify-content-center",
]
arrow_specific_class_name = dict(
    up=["fa-angle-up", "top-0", "start-50", "translate-middle-x"],
    left=["fa-angle-left", "top-50", "start-0", "translate-middle-y"],
    right=["fa-angle-right", "top-50", "end-0", "translate-middle-y"],
    down=["fa-angle-down", "bottom-0", "start-50", "translate-middle-x"],
)
arrow_common_style = {
    "border-radius": "0.4rem",
    "background": "green",
    "font-size": "1.8rem",
}
arrow_specific_style = dict(
    up=dict(width="45%", height="25%"),
    left=dict(width="25%", height="45%"),
    right=dict(width="25%", height="45%"),
    down=dict(width="45%", height="25%"),
)


def arrow(arrow):
    icon = html.I(
        id=f"arrow-{arrow}",
        className=" ".join(arrow_common_class_name + arrow_specific_class_name[arrow]),
        style=arrow_common_style | arrow_specific_style[arrow],
    )
    return html.Div(icon, id=f"hide-arrow-{arrow}", style=dict(display="none"))


logo_svg_paths = [
    "M48.0313 20.6375c-.116-2.0295-1.4362-4.0581-3.8965-4.6309a1.0001 1.0001 0 1 0-.4551 1.9473c1.881.4379 2.5072 1.8815 2.3418 3.3223-.1654 1.4408-1.102 2.7028-3.0332 2.703h-7.957v5.8731l2.0195 2.0215v6.7266c-1.1624.4146-2.0098 1.5196-2.0098 2.8164 0 1.645 1.355 3 3 3s3-1.355 3-3c0-1.2897-.8377-2.3906-1.9902-2.8106v-7.5605l-2.0196-2.0215v-3.045h5.957c2.887-.0003 4.7572-2.1905 5.0196-4.4765.0328-.2857.04-.5753.0235-.8652zM43.082 11.95c0-1.5458-.5105-3.104-1.5761-4.3027-1.0657-1.1989-2.7021-1.9903-4.7168-1.9903a1.0001 1.0001 0 0 0-.0078 0c-.6405.0041-1.2343.2572-1.8399.4531-1.2658-2.7037-3.9882-3.9352-6.5-3.5625-.4113.061-.814.1751-1.209.3165-3.5043-4.2105-10.1937-3.6978-13.0117 1.0058-.1385.2312-.253.4678-.3652.705-.836-.3379-1.7273-.5234-2.6328-.5292a1.0001 1.0001 0 0 0-.006 0C8.5379 4.0449 6.075 5.532 4.8282 7.9031a1.0001 1.0001 0 1 0 1.7695.9317 5.2107 5.2107 0 0 1 4.6153-2.7891c.6967.005 1.3826.1581 2.0195.4355-.7781 4.127 1.8366 8.4463 6.2637 9.3418l.0996.0196h.4453a1.0001 1.0001 0 1 0 0-2h-.1894c-4.0583-.853-6.0524-5.3794-3.916-8.9453 2.0727-3.4597 6.7761-3.9167 9.4902-1.041C24.0426 4.9435 23.076 6.63 23.082 8.7761a1.0001 1.0001 0 1 0 2-.004c-.007-2.5733 1.7004-3.9564 3.6524-4.246 1.952-.2897 3.986.5373 4.7265 3.002a1.0001 1.0001 0 0 0 1.416.6015 4.2388 4.2388 0 0 1 1.916-.4727h.002c1.511.0016 2.5188.533 3.2169 1.3184.699.7864 1.0703 1.8733 1.0703 2.9746 0 1.1013-.3713 2.19-1.0703 2.9766-.6991.7864-1.708 1.3183-3.2227 1.3183a1.0001 1.0001 0 1 0 0 2c2.0147 0 3.6512-.7914 4.7168-1.9902 1.0656-1.1989 1.5761-2.759 1.5761-4.3047zm-4.041 29.4668c0 .5641-.4359 1-1 1s-1-.4359-1-1 .4359-1 1-1 1 .4359 1 1zm-3.9805-8.9766a1.0001 1.0001 0 0 0-.3027-.6875l-1.7266-1.7285V19.1453a1.0001 1.0001 0 0 0 .0235-.2227 1.0001 1.0001 0 0 0-.4727-.834 1.0001 1.0001 0 0 0-.0234-.0117 1.0001 1.0001 0 0 0-.6133-.1484c-2.175-.0516-3.9043-1.8021-3.9043-3.9902a1.0001 1.0001 0 1 0-2 0c0 2.957 2.1667 5.4219 4.9902 5.9062v11.0078l2.3126 2.3145a1.0001 1.0001 0 0 0 1.7167-.7266zm-2.0195 8.9766c0-1.2897-.8377-2.3906-1.9902-2.8106v-5.5605l-2.0195-2.0215v-5.586a1.0001 1.0001 0 1 0-2 0v6.4141l2.0195 2.0215v4.7266c-1.1624.4146-2.0098 1.5196-2.0098 2.8164 0 1.645 1.355 3 3 3s3-1.355 3-3zm-2 0c0 .5641-.4359 1-1 1s-1-.4359-1-1 .4359-1 1-1 1 .4359 1 1zm-2-30.4785a1 1 0 0 0-1-1 1 1 0 0 0-1 1 1 1 0 0 0 1 1 1 1 0 0 0 1-1zm-4 14.041a1.0001 1.0001 0 1 0-2 0v10.959a1.0001 1.0001 0 1 0 2 0zm-3.9902-.123a1.0001 1.0001 0 1 0-2 0v6.168l-2.0196 2.0214v5.5605c-1.1525.42-1.9902 1.5209-1.9902 2.8106 0 1.645 1.355 3 3 3s3-1.355 3-3c0-1.2968-.8473-2.4018-2.0098-2.8164v-4.7266l2.0196-2.0215zM19.041 41.4167c0 .5641-.4359 1-1 1s-1-.4359-1-1 .4359-1 1-1 1 .4359 1 1zm-1.9902-16.5606a1.0001 1.0001 0 1 0-2 0v5.168l-1.7266 1.7285a1.0001 1.0001 0 1 0 1.414 1.414l2.3126-2.3144zm-4-.877H6c-2.221 0-4-1.779-4-4 0-2.2209 1.779-4 4-4a1.0001 1.0001 0 1 0 0-2c-3.3019 0-6 2.6982-6 6 0 3.302 2.6981 6 6 6h5.0508v3.461l-2.0196 1.5196v7.6464c-1.1525.42-1.9902 1.5209-1.9902 2.8106 0 1.645 1.355 3 3 3s3-1.355 3-3c0-1.2968-.8473-2.4018-2.0098-2.8164v-6.6426l2.0196-1.5195zM11.041 41.4169c0 .5641-.4359 1-1 1s-1-.4359-1-1 .4359-1 1-1 1 .4359 1 1zm-5.5-29.6875a1 1 0 0 0-1-1 1 1 0 0 0-1 1 1 1 0 0 0 1 1 1 1 0 0 0 1-1z",
    "M23.5969 17.7438a.5518.5518 0 0 0-.5528-.5508h-7.1503a.5518.5518 0 0 0-.5528.5508v.9668a.5518.5518 0 0 0 .5528.5527h2.3222v.664c0 .8837.1993 1.637.6778 2.1798.4783.546 1.2006.8066 2.0136.8066.806 0 1.5247-.262 2.002-.8047.4823-.5424.6875-1.2973.6875-2.1816zm-1.9004 1.5195v.664c0 .3551-.0799.5423-.1973.666-.1171.1236-.2696.1954-.5918.1954-.3262 0-.4794-.0727-.5957-.1953-.1174-.1238-.1972-.311-.1972-.666v-.664zm-2.498-.9668a.5518.5518 0 0 0-.0352.0332.5518.5518 0 0 0-.0332-.0332z",
    "M14.7879 17.7438a.5518.5518 0 0 0-.5528-.5508H7.0848a.5518.5518 0 0 0-.5528.5508v.9668a.5518.5518 0 0 0 .5528.5527H9.407v.664c0 .8837.1993 1.637.6778 2.1798.4783.546 1.2006.8066 2.0136.8066.806 0 1.5247-.262 2.002-.8047.4823-.5424.6875-1.2973.6875-2.1816zm-1.9004 1.5195v.664c0 .3551-.0799.5423-.1973.666-.1171.1236-.2696.1954-.5918.1954-.3262 0-.4794-.0727-.5957-.1953-.1174-.1238-.1972-.311-.1972-.666v-.664zm-2.498-.9668a.5518.5518 0 0 0-.0352.0332.5518.5518 0 0 0-.0332-.0332z",
]


def action_overlay():
    svg = dsvg.Svg(
        dsvg.G([dsvg.Path(d=p) for p in logo_svg_paths], fill="white"),
        viewBox="0 0 48.0398 44.4168",
        className="m-1",
    )
    logo = dbc.Card(
        svg,
        id="action-logo",
        className="position-absolute top-50 start-50 translate-middle d-flex align-items-center justify-content-center",
        style={
            "width": "45%",
            "height": "45%",
            "border-radius": "0.6rem",
            "background-color": "green",
        },
    )

    return dbc.Container(
        [arrow("up"), arrow("left"), logo, arrow("right"), arrow("down")],
        style=dict(width="6.6em", height="6.6em"),
        class_name="position-absolute top-0 position-relative m-2",
        fluid=True,
    )

# %% ../nbs/backup_overlay.ipynb 5
def bar_badge(children, class_name=""):
    return dbc.Badge(
        children,
        color="grey",
        pill=True,
        text_color="white",
        class_name=f"position-absolute top-0 {class_name}",
    )


def progress_overlay():
    # Progress
    map_bar = dbc.Progress(
        id="map-bar",
        value=0,
        color="green",
        striped=True,
        animated=True,
        style={"background-color": "rgba(64,64,64,0.75)", "height": "1.5em"},
    )
    map_badges = [
        bar_badge(
            [
                html.Span("Progress "),
                html.Span(0.0, id="progress"),
                html.Span(" %"),
            ],
            "translate-middle-y",
        ),
        bar_badge(html.Span("00:00.000", id="racetime"), "end-0 translate-middle-y"),
        bar_badge(
            [
                html.Span("CP "),
                html.Span(0, id="cp-count"),
                html.Span(" / "),
                html.Span(0, id="cp-max"),
            ],
            class_name="start-50 translate-middle",
        ),
    ]
    map_col = dbc.Col(
        children=[map_bar, *map_badges],
        class_name="position-relative p-0 me-2",
    )

    # Respawn
    respawn_bar = dbc.Progress(
        id="respawn-bar",
        value=0,
        color="danger",
        bar=True,
        striped=True,
    )
    mistake_bar = dbc.Progress(
        id="mistake-bar",
        value=0,
        color="warning",
        striped=True,
        bar=True,
        animated=True,
    )
    respawn_mistake_bar = dbc.Progress(
        [respawn_progress_bar, mistake_progress_bar],
        style={"background-color": "rgba(64,64,64,0.75)", "height": "1.5em"},
    )
    respawn_badge = bar_badge(
        [
            html.Span("Respawn "),
            html.Span(0, id="respawn-count"),
            html.Span(" / "),
            html.Span(0, id="respawn-max"),
        ],
        "start-50 translate-middle",
    )
    respawn_col = dbc.Col(
        [respawn_mistake_bar, respawn_badge],
        width=3,
        class_name="position-relative p-0 me-2",
    )

    # Session
    session_bar = dbc.Progress(
        id="session-bar",
        value=0,
        color="info",
        striped=True,
        animated=True,
        style={"background-color": "rgba(64,64,64,0.75)", "height": "1.5em"},
    )
    session_badge = bar_badge(
        [
            html.Span("Round "),
            html.Span(0, id="round-count"),
            html.Span(" / "),
            html.Span(0, id="round-max"),
        ],
        "start-50 translate-middle",
    )
    session_col = dbc.Col(
        [session_bar, session_badge],
        width=3,
        class_name="position-relative p-0",
    )

    return dbc.Container(
        dbc.Row([progress_col, respawn_col, session_col], class_name="g-0"),
        class_name="position-absolute bottom-0 p-2",
        fluid=True,
    )

# %% ../nbs/backup_overlay.ipynb 7
def map_name(color):
    badge = dbc.Badge(
        "Map name",
        id="map-name",
        pill=True,
        color=color,
        style={"font-size": "1.1em"},
    )
    return dbc.Container(
        badge,
        class_name="pt-2 d-flex justify-content-center",
        fluid=True,
    )

# %% ../nbs/backup_overlay.ipynb 9
medal_config = dict(
    unfinished=dict(color="rgb(242, 71, 64)", icon="fa-ban"),
    no_medal=dict(color="white", icon="fa-flag"),
    bronze=dict(color="rgb(153, 102, 68)", icon="fa-circle"),
    silver=dict(color="rgb(136, 153, 153)", icon="fa-circle"),
    gold=dict(color="rgb(221, 187, 68)", icon="fa-circle"),
    author=dict(color="rgb(0, 119, 17)", icon="fa-circle"),
)


def medal_count(medal, id_prefix):
    return html.P(
        [
            html.Span("0", id=f"{id_prefix}-{medal}"),
            html.I(
                className=f"fa-solid {medal_config[medal]['icon']} ms-1",
                style=dict(color=medal_config[medal]["color"]),
            ),
        ],
        className="p-0 m-1 d-flex justify-content-end",
    )


def medal_badge(title, id_prefix):
    return dbc.Badge(
        [
            html.Div(
                title,
                className="m-1 d-flex justify-content-end",
                style={"font-size": "1em", "white-space": "pre"},
                id=f"{id_prefix}-title",
            ),
            html.Hr(className="p-0 mt-1 mb-2"),
            html.P(
                "PB",
                id=f"{id_prefix}-pb",
                className="p-0 m-1 d-flex justify-content-end",
            ),
            html.Hr(className="p-0 mt-1 mb-2"),
            medal_count("unfinished", id_prefix),
            medal_count("no_medal", id_prefix),
            medal_count("bronze", id_prefix),
            medal_count("silver", id_prefix),
            medal_count("gold", id_prefix),
            medal_count("author", id_prefix),
        ],
        id=f"{id_prefix}-medal-badge",
        class_name="me-2",
        color="rgba(64,64,64,0.75)",
        style={"border-radius": "1rem", "display": ""},
    )


def stats():
    return dbc.Container(
        [
            medal_badge("Session", "session"),
            medal_badge("Map", "total"),
        ],
        class_name="position-absolute top-0 position-relative p-0 pt-2 d-flex justify-content-end",
        fluid=True,
    )

# %% ../nbs/backup_overlay.ipynb 11
def summary_value(value, id=""):
    return html.P(value, id=id, className="p-0 m-1 d-flex justify-content-end")


def summary_label(label, id=""):
    return html.P(label, id=id, className="p-0 m-1 d-flex justify-content-start")


def round_summary():
    return dbc.Container(
        dbc.Badge(
            [
                dbc.Row(
                    "Session 0 : Round 0 / 0",
                    id="summary-title",
                    className="m-1 d-flex justify-content-center",
                    style={"font-size": "1em", "white-space": "pre"},
                ),
                html.Hr(className="p-0 m-2"),
                dbc.Row(
                    [
                        dbc.Col(
                            [
                                summary_value("0.0 %", id="summary-result"),
                                summary_value("0", id="summary-reward"),
                                summary_value("0", id="summary-respawn"),
                            ],
                        ),
                        dbc.Col(
                            html.Div(className="vr", style=dict(height="100%")), width=1
                        ),
                        dbc.Col(
                            [
                                summary_label("Finish time", id="summary-result-label"),
                                summary_label("Reward"),
                                summary_label("Respawn"),
                            ],
                        ),
                    ],
                    class_name="g-0",
                ),
                html.P("No respawn", className="p-0 m-2"),
                dbc.Row(
                    [
                        dbc.Col(
                            [
                                summary_value("0.0 %", id="summary-no-respawn-result"),
                                summary_value("0", id="summary-no-respawn-reward"),
                            ],
                        ),
                        dbc.Col(
                            html.Div(className="vr", style=dict(height="100%")), width=1
                        ),
                        dbc.Col(
                            [
                                summary_label(
                                    "Finish time", id="summary-no-respawn-result-label"
                                ),
                                summary_label("Reward"),
                            ],
                        ),
                    ],
                    class_name="g-0",
                ),
            ],
            color="rgba(64,64,64,0.75)",
            style={"border-radius": "1rem", "display": "", "width": "30%"},
        ),
        class_name="d-flex justify-content-center",
        style={"padding-top": "6rem", "font-size": "1.2em"},
        fluid=True,
    )

# %% ../nbs/backup_overlay.ipynb 13
WebSocketMock = dcc.ConfirmDialog


def layout(color, size, border=False):
    return dbc.Container(
        [
            dcc.Location(id="url", refresh=False),
            html.Div(
                [
                    WebSocketMock(id=f"ws-{ws}")
                    for ws in ["status", "action", "step", "episode", "session"]
                ],
                id="websockets",
            ),
            map_name(color),
            stats(),
            html.Div(
                [
                    progress(),
                    action_overlay(),
                ],
                id="content-driving",
                hidden=False,
            ),
            html.Div(round_summary(), id="content-end-round", hidden=True),
        ],
        class_name="position-relative p-0" + (" border border-light" if border else ""),
        style=size | {"background-color": "transparent", "font-size": "1.2em"},
        fluid=True,
    )

# %% ../nbs/backup_overlay.ipynb 15
action_callback_args = [
    """
    function(
        message,
        arrowUpStyle,
        arrowLeftStyle,
        actionLogoStyle,
        arrowRightStyle,
        arrowDownStyle,
    ) {
        if(typeof message === 'undefined') {
            throw window.dash_clientside.PreventUpdate
        }
        var data = JSON.parse(message.data);
        const defaultBg = 'rgba(64,64,64,0.75)';
        const inputColor = ['hsl(',(data.action_tier*120).toString(10),',100%,36%)'].join('');
        const leftSteerPercent = (data.steer < 0) ? -data.steer * 100 : 0;
        const leftArrowBg = 'linear-gradient(to left, ' + inputColor + ' 0%,' + inputColor + ' ' + leftSteerPercent + '%,' + defaultBg + ' ' + leftSteerPercent + '%,' + defaultBg + ' 100%)';
        const rightSteerPercent = (data.steer > 0) ? data.steer * 100 : 0;
        const rightArrowBg = 'linear-gradient(to right, ' + inputColor + ' 0%,' + inputColor + ' ' + rightSteerPercent + '%,' + defaultBg + ' ' + rightSteerPercent + '%,' + defaultBg + ' 100%)';
        const logoBgHue = (((data.exploration === undefined || data.exploration == "no") ? 1 : 0.3)*120).toString(10);
        const logoBg = ['hsl(',logoBgHue,',100%,36%)'].join('');
        arrowUpStyle = {...arrowUpStyle, "background":data.accelerate?inputColor:defaultBg};
        arrowLeftStyle = {...arrowLeftStyle, "background":leftArrowBg};
        actionLogoStyle = {...actionLogoStyle, "background":logoBg};
        arrowRightStyle = {...arrowRightStyle, "background":rightArrowBg};
        arrowDownStyle = {...arrowDownStyle, "background":data.brake?inputColor:defaultBg};
        return [
            arrowUpStyle,
            arrowLeftStyle,
            actionLogoStyle,
            arrowRightStyle,
            arrowDownStyle,
        ];
    }
    """,
    Output("arrow-up", "style"),
    Output("arrow-left", "style"),
    Output("action-logo", "style"),
    Output("arrow-right", "style"),
    Output("arrow-down", "style"),
    Input("ws-action", "message"),
    State("arrow-up", "style"),
    State("arrow-left", "style"),
    State("action-logo", "style"),
    State("arrow-right", "style"),
    State("arrow-down", "style"),
]

step_ws_callback_args = [
    """
    function(
        message,
        summary_result_label,
        summary_no_respawn_result_label,
        summary_result,
        summary_reward,
        summary_respawn,
        summary_no_respawn_result,
        summary_no_respawn_reward,
    ) {
        if(typeof message === 'undefined') {
            throw window.dash_clientside.PreventUpdate
        }
        var data = JSON.parse(message.data);
        var map_progress_value = data.progress * 100;
        var racetime_children = new Date(data.racetime).toISOString().slice(14, -1);
        var cp_count = 'CP ' + data.checkpoints.length;
        var respawn_count = data.trajectory.respawn_count;
        var mistake_duration = data.trajectory.mistake_duration;
        var max_respawn = data.trajectory.max_respawn;
        if(data.must_respawn) {
            map_progress_value = data.trajectory.respawn_progress * 100;
            respawn_count = respawn_count + 1;
            mistake_duration = 0;
        }
        var respawn_bar_count = respawn_count;
        if(data.done && !data.finished) {
            respawn_bar_count = respawn_bar_count + 1;
            mistake_duration = 0;
        }
        var respawn_progress_value = respawn_bar_count / (data.trajectory.max_respawn + 1) * 100;
        var mistake_progress_value = (
            mistake_duration
            / data.trajectory.max_mistake_duration
            / (data.trajectory.max_respawn + 1)
            * 100
        );
        var respawn_badge_value = 'Respawn '+respawn_count+' / '+data.trajectory.max_respawn;
        var arrow_display = (data.must_respawn || data.done) ? "none" : "";
        if(data.done || data.racetime < 3000) {
            var ui = "end-round";
        } else {
            var ui = "driving";
        }
        if(data.done) {
            if(data.finished) {
                summary_result_label = "Finish time";
                summary_no_respawn_result_label = "Finish time";
                summary_result = new Date(data.finish_racetime).toISOString().slice(14, -1);
                summary_no_respawn_result = new Date(data.no_respawn_finish_racetime).toISOString().slice(14, -1);
            } else {
                summary_result_label = "Progress";
                summary_no_respawn_result_label = "Progress";
                summary_result = map_progress_value.toFixed(1)+' %';
                summary_no_respawn_result = map_progress_value.toFixed(1)+' %';
            }
            summary_reward = data.total_reward.toFixed(2);
            summary_respawn = data.total_respawn_count;
            summary_no_respawn_reward = data.no_respawn_reward.toFixed(2);
        }
        return [
            map_progress_value,
            'Progress '+map_progress_value.toFixed(1)+' %',
            racetime_children,
            cp_count,
            respawn_progress_value,
            mistake_progress_value,
            respawn_badge_value,
            {"display":arrow_display},
            {"display":arrow_display},
            {"display":arrow_display},
            {"display":arrow_display},
            ui !== "driving",
            ui !== "end-round",
            summary_result_label,
            summary_no_respawn_result_label,
            summary_result,
            summary_reward,
            summary_respawn,
            summary_no_respawn_result,
            summary_no_respawn_reward,
        ];
    }
    """,
    Output("map-progress-bar", "value"),
    Output("map-progress-badge", "children"),
    Output("map-racetime-badge", "children"),
    Output("cp-count", "children"),
    Output("respawn-progress-bar", "value"),
    Output("mistake-progress-bar", "value"),
    Output("respawn-progress-badge", "children"),
    Output("hide_action_up", "style"),
    Output("hide_action_left", "style"),
    Output("hide_action_right", "style"),
    Output("hide_action_down", "style"),
    Output("content-driving", "hidden"),
    Output("content-end-round", "hidden"),
    Output("summary-result-label", "children"),
    Output("summary-no-respawn-result-label", "children"),
    Output("summary-result", "children"),
    Output("summary-reward", "children"),
    Output("summary-respawn", "children"),
    Output("summary-no-respawn-result", "children"),
    Output("summary-no-respawn-reward", "children"),
    Input("ws-step", "message"),
    Input("summary-result-label", "children"),
    Input("summary-no-respawn-result-label", "children"),
    Input("summary-result", "children"),
    Input("summary-reward", "children"),
    Input("summary-respawn", "children"),
    Input("summary-no-respawn-result", "children"),
    Input("summary-no-respawn-reward", "children"),
]

session_ws_callback_args = [
    """
    function(
        message,
        session_medal_badge_style,
    ) {
        if(typeof message === 'undefined') {
            throw window.dash_clientside.PreventUpdate
        }
        var data = JSON.parse(message.data);
        var map_name_children = data.config.map.sanitized_name;
        var cp_max = ' / ' + data.config.map.nb_checkpoints;
        
        var total = data.stats.total;
        var session = data.stats.sessions[data.stats.current_session];
        var session_title = "Session " + data.stats.current_session;
        var nb_session = Object.keys(data.stats.sessions).length;
        
        session_medal_badge_style = {
            ...session_medal_badge_style, "display":(nb_session === 1)?"none":""
        }
        
        if(total.best.finish_racetime != null) {
            var total_pb = new Date(total.best.finish_racetime).toISOString().slice(14, -1);
        } else {
            var total_pb = (total.best.progress * 100).toFixed(1)+' %';
        }
        if(session.best.finish_racetime != null) {
            var session_pb = new Date(session.best.finish_racetime).toISOString().slice(14, -1);
        } else {
            var session_pb = (session.best.progress * 100).toFixed(1)+' %';
        }
        var session_state = data.state.session_scheduler;
        var session_badge_label = 'Round ' + session_state.round + ' / ' + session_state.nb_episode;
        var summary_title = session_title + " : " + session_badge_label;
        
        return [
            map_name_children,
            cp_max,
            total_pb,
            total.finishes.no_medal,
            total.finishes.bronze,
            total.finishes.silver,
            total.finishes.gold,
            total.finishes.author,
            total.finishes.unfinished,
            session_title,
            session_pb,
            session.finishes.no_medal,
            session.finishes.bronze,
            session.finishes.silver,
            session.finishes.gold,
            session.finishes.author,
            session.finishes.unfinished,
            session_state.round,
            session_state.nb_episode,
            session_badge_label,
            session_medal_badge_style,
            summary_title,
        ];
    }
    """,
    Output("map-name", "children"),
    Output("cp-max", "children"),
    Output("total-pb", "children"),
    Output("total-no_medal", "children"),
    Output("total-bronze", "children"),
    Output("total-silver", "children"),
    Output("total-gold", "children"),
    Output("total-author", "children"),
    Output("total-unfinished", "children"),
    Output("session-title", "children"),
    Output("session-pb", "children"),
    Output("session-no_medal", "children"),
    Output("session-bronze", "children"),
    Output("session-silver", "children"),
    Output("session-gold", "children"),
    Output("session-author", "children"),
    Output("session-unfinished", "children"),
    Output("session-progress-bar", "value"),
    Output("session-progress-bar", "max"),
    Output("session-progress-badge", "children"),
    Output("session-medal-badge", "style"),
    Output("summary-title", "children"),
    Input("ws-session", "message"),
    State("session-medal-badge", "style"),
]

# %% ../nbs/backup_overlay.ipynb 16
class EnvOverlay(Thread):
    def __init__(
        self,
        color=px.colors.qualitative.Vivid[0],
        size=dict(width=960, height=540),
        debug=False,
        border=False,
        port=8051,
    ):
        super().__init__()
        self.debug = debug
        self.port = port
        self.app = Dash(
            external_stylesheets=[dbc.themes.DARKLY, dbc.icons.FONT_AWESOME],
        )

        @self.app.callback(
            Output("websockets", "children"),
            Output("map-name", "color"),
            Input("url", "href"),
            State("map-name", "color"),
        )
        def websockets(href, color):
            url = furl(href)
            env_name = url.path.segments[0]
            websockets_children = [
                WebSocket(url=f"ws://localhost:2013/ws/{env_name}-{ws}", id=f"ws-{ws}")
                for ws in ["status", "action", "step", "episode", "session"]
            ]
            return [websockets_children, url.args.get("color", color)]

        self.app.enable_dev_tools(dev_tools_silence_routes_logging=None)
        self.app.layout = layout(color, size, border)
        self.app.clientside_callback(
            *action_ws_callback_args, prevent_initial_call=True
        )
        self.app.clientside_callback(*step_ws_callback_args, prevent_initial_call=True)
        self.app.clientside_callback(
            *session_ws_callback_args, prevent_initial_call=True
        )

        self.start()

    def run(self):
        self.app.run_server(debug=self.debug, port=self.port)
