# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/overlay_medal.ipynb.

# %% auto 0
__all__ = ['medal_index', 'medal_icon', 'pb_with_icon', 'pb_badge', 'racetime2str', 'medal_badges']

# %% ../../nbs/overlay_medal.ipynb 1
import dash_bootstrap_components as dbc
from .default import background_color
from dash import html

# %% ../../nbs/overlay_medal.ipynb 2
medal_config = dict(
    unfinished=dict(color="rgb(242, 71, 64)", icon="fa-ban"),
    no_medal=dict(color="white", icon="fa-flag"),
    bronze=dict(color="rgb(153, 102, 68)", icon="fa-circle"),
    silver=dict(color="rgb(136, 153, 153)", icon="fa-circle"),
    gold=dict(color="rgb(221, 187, 68)", icon="fa-circle"),
    author=dict(color="rgb(0, 119, 17)", icon="fa-circle"),
)

# %% ../../nbs/overlay_medal.ipynb 3
medal_index = ["unfinished", "no_medal", "bronze", "silver", "gold", "author"]


def medal_icon(medal):
    return html.I(
        className=f"fa-solid {medal_config[medal]['icon']} me-2",
        style=dict(color=medal_config[medal]["color"]),
    )


def pb_with_icon(medals, best, no_respawn=False):
    key = "no_respawn_finish_racetime" if no_respawn else "finish_racetime"
    if best.get(key, None) is not None:
        pb = racetime2str(best[key])
        if best[key] <= medals["author"]:
            pb_icon = medal_icon("author")
        elif best[key] <= medals["gold"]:
            pb_icon = medal_icon("gold")
        elif best[key] <= medals["silver"]:
            pb_icon = medal_icon("silver")
        elif best[key] <= medals["bronze"]:
            pb_icon = medal_icon("bronze")
        else:
            pb_icon = medal_icon("no_medal")
    else:
        pb = f"{best['progress']*100:.1f} %"
        pb_icon = medal_icon("unfinished")
    return html.Span([pb_icon, pb])


def pb_badge(medals, best):
    return dbc.Badge(
        [html.Span("PB", className="me-2"), pb_with_icon(medals, best)],
        pill=True,
        color=background_color,
    )


def racetime2str(milliseconds):
    seconds, milliseconds = divmod(milliseconds, 1000)
    minutes, seconds = divmod(seconds, 60)
    return f"{minutes:02d}:{seconds:02d}.{milliseconds:03d}"


def medal_badges(medals):
    return [
        dbc.Badge(
            [medal_icon(medal), racetime2str(medals[medal])],
            pill=True,
            color=background_color,
        )
        for medal in sorted(medals, key=medals.get, reverse=True)
    ]
